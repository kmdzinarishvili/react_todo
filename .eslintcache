[{"/home/keti/react_todo/my-app/src/index.js":"1","/home/keti/react_todo/my-app/src/App.js":"2","/home/keti/react_todo/my-app/src/reportWebVitals.js":"3","/home/keti/react_todo/my-app/src/ToDoDroppable.jsx":"4","/home/keti/react_todo/my-app/src/ToDoDraggable.jsx":"5","/home/keti/react_todo/my-app/src/Input.jsx":"6"},{"size":500,"mtime":1611035166391,"results":"7","hashOfConfig":"8"},{"size":3892,"mtime":1611076316138,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611035166391,"results":"10","hashOfConfig":"8"},{"size":898,"mtime":1611072737050,"results":"11","hashOfConfig":"8"},{"size":1115,"mtime":1611076312922,"results":"12","hashOfConfig":"8"},{"size":793,"mtime":1611076314462,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"12s2hhd",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/keti/react_todo/my-app/src/index.js",[],["28","29"],"/home/keti/react_todo/my-app/src/App.js",["30","31","32","33"],"import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {DragDropContext} from \"react-beautiful-dnd\";\nimport _ from \"lodash\";\nimport {v4} from \"uuid\";\nimport ToDoDroppable from './ToDoDroppable';\nimport Input from \"./Input\";\n\nfunction App() {\n  const [taskName, setTaskName] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n  const [assignedTo, setAssignedTo]= useState(\"\");\n  const [comment, setComment]= useState(\"\");\n  const [date, setDate]= useState(\"\");\n  const [percents, setPercents] = useState(\n[0,0,0,0]\n  );\n  const order = [\"backlog\",\"todo\", \"in progress\", \"done\"]\n\n  const [state, setState] = useState({\n    \"backlog\": {\n      title: \"Backlog\",\n      items: [],\n    },\n    \"todo\": {\n      title: \"Todo\",\n      items: [],\n    },\n    \"in-progress\": {\n      title: \"In Progress\",\n      items: [],\n    },\n    \"done\": {\n      title: \"Completed\",\n      items: [],\n    }\n  })\n\n \n  \n  const handleTaskName = (taskName)=>{\n      setTaskName(taskName.target.value);\n  }\n  const handleDueDate =(dueDate)=>{\n      setDueDate(dueDate.target.value);\n  }\n  const handleAssignedTo = (assignedTo)=>{\n    setAssignedTo(assignedTo.target.value);\n}\nconst handleComment =(comment)=>{\n    setComment(comment.target.value);\n}\n\nuseEffect(() => {\n\n    var timerID = setInterval( () =>     setDate(new Date()), 1000 );\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  \n}, );\n\nuseEffect(()=>{\n  let total = 0;\n  let values = _.map(state, (data,key)=>{\n    let currCount = data.items.length;\n    total+=currCount;\n    return (currCount);\n  });\n  let percentages = values.map((v)=>{\n    if(total!=0)\n    {\n      return v/total;\n    }\n    else{\n      return v;\n    }\n  });\n  console.log(percentages);\n  setPercents(percentages);\n  console.log(percentages);\n\n},[state]);\n\n\n\n const handleDragEnd = ({destination, source}) => {\n  if (!destination) {\n      return\n    }\n\n    if (destination.index === source.index && destination.droppableId === source.droppableId) {\n      return\n    }\n\n    const itemCopy = {...state[source.droppableId].items[source.index]}\n\n    setState(prev => {\n      prev = {...prev}\n      prev[source.droppableId].items.splice(source.index, 1)\n\n\n      prev[destination.droppableId].items.splice(destination.index, 0, itemCopy)\n\n      return prev\n    })\n  }\n\n  const addItem = () => {\n    if (assignedTo!=0 &&dueDate!=\"\"&&taskName!=\"\"){\n    setState(prev => {\n      return {\n        ...prev,\n        todo: {\n          title: \"Todo\",\n          items: [\n            {\n              id: v4(),\n              name: taskName,\n              dueDate: dueDate,\n              assignedTo: assignedTo,\n              comment: comment\n            },\n            ...prev.todo.items\n          ]\n        }\n      }\n    })\n\n    setTaskName(\"\");\n    setDueDate(\"\");\n    setAssignedTo(\"\");\n    setComment(\"\");\n  }\n  }\n\n  return (\n    <>\n       \n      <Input className=\"App\" \n      handleTaskName={handleTaskName} handleDueDate={handleDueDate} handleAssignedTo={handleAssignedTo} handleComment={handleComment} \n      taskName={taskName} dueDate={dueDate} assignedTo={assignedTo} comment={comment}\n      save={addItem}/>\n      <br/>\n    <div className=\"App\">\n   \n      \n      <DragDropContext className=\"ddcontext\" onDragEnd={handleDragEnd}>\n        {_.map(state, (data, key) => {\n          return(\n            <div key={key} className={\"column\"}>\n              <h3>{data.title}</h3>\n              <ToDoDroppable date={date} key={key} droppableId={key} data={data}></ToDoDroppable>\n            </div>\n          )\n        })}\n      </DragDropContext>\n     \n    </div>\n    <div className=\"progress-bar\">\n      \n        {percents.map((value, index)=>{\n        return <div key={index}><h3 >{order[index]}: {value*100}% <div className=\"progressBar\" style={{width:value*100+\"%\"}}></div></h3></div>\n        }\n        )}\n    </div>\n    </>\n  );\n}\n\nexport default App;","/home/keti/react_todo/my-app/src/reportWebVitals.js",[],"/home/keti/react_todo/my-app/src/ToDoDroppable.jsx",[],"/home/keti/react_todo/my-app/src/ToDoDraggable.jsx",["34"],"/home/keti/react_todo/my-app/src/Input.jsx",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":71,"column":13,"nodeType":"41","messageId":"42","endLine":71,"endColumn":15},{"ruleId":"39","severity":1,"message":"40","line":110,"column":19,"nodeType":"41","messageId":"42","endLine":110,"endColumn":21},{"ruleId":"39","severity":1,"message":"40","line":110,"column":32,"nodeType":"41","messageId":"42","endLine":110,"endColumn":34},{"ruleId":"39","severity":1,"message":"40","line":110,"column":46,"nodeType":"41","messageId":"42","endLine":110,"endColumn":48},{"ruleId":"43","severity":1,"message":"44","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":18},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'toString' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]